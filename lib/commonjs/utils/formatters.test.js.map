{"version":3,"sources":["formatters.test.ts"],"names":["describe","test","each","oldValue","newValue","output","expect","toEqual"],"mappings":";;AAAA;;AAEAA,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpCC,EAAAA,IAAI,CAACC,IAAL,CAAU,CACR;AACE;AACAC,IAAAA,QAAQ,EAAE,EAFZ;AAGEC,IAAAA,QAAQ,EAAE,kBAHZ;AAIEC,IAAAA,MAAM,EAAE;AAJV,GADQ,EAOR;AACE;AACAF,IAAAA,QAAQ,EAAE,EAFZ;AAGEC,IAAAA,QAAQ,EAAE,sBAHZ;AAIEC,IAAAA,MAAM,EAAE;AAJV,GAPQ,EAaR;AACEF,IAAAA,QAAQ,EAAE,EADZ;AAEEC,IAAAA,QAAQ,EAAE,YAFZ;AAGEC,IAAAA,MAAM,EAAE;AAHV,GAbQ,EAkBR;AACEF,IAAAA,QAAQ,EAAE,KADZ;AAEEC,IAAAA,QAAQ,EAAE,MAFZ;AAGEC,IAAAA,MAAM,EAAE;AAHV,GAlBQ,EAuBR;AACE;AACAF,IAAAA,QAAQ,EAAE,QAFZ;AAGEC,IAAAA,QAAQ,EAAE,OAHZ;AAIEC,IAAAA,MAAM,EAAE;AAJV,GAvBQ,EA6BR;AACEF,IAAAA,QAAQ,EAAE,EADZ;AAEEC,IAAAA,QAAQ,EAAE,GAFZ;AAGEC,IAAAA,MAAM,EAAE;AAHV,GA7BQ,CAAV,EAkCG,IAlCH,EAkCS,CAAC;AAAEF,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,GAAD,KAAoC;AAC3CC,IAAAA,MAAM,CAAC,qCAAoBH,QAApB,EAA8BC,QAA9B,CAAD,CAAN,CAAgDG,OAAhD,CAAwDF,MAAxD;AACD,GApCD;AAqCD,CAtCO,CAAR;AAwCAL,QAAQ,CAAC,yBAAD,EAA4B,MAAM;AACxCC,EAAAA,IAAI,CAACC,IAAL,CAAU,CACR;AACE;AACAC,IAAAA,QAAQ,EAAE,EAFZ;AAGEC,IAAAA,QAAQ,EAAE,MAHZ;AAIEC,IAAAA,MAAM,EAAE;AAJV,GADQ,EAOR;AACE;AACAF,IAAAA,QAAQ,EAAE,EAFZ;AAGEC,IAAAA,QAAQ,EAAE,OAHZ;AAIEC,IAAAA,MAAM,EAAE;AAJV,GAPQ,EAaR;AACEF,IAAAA,QAAQ,EAAE,GADZ;AAEEC,IAAAA,QAAQ,EAAE,IAFZ;AAGEC,IAAAA,MAAM,EAAE;AAHV,GAbQ,EAkBR;AACEF,IAAAA,QAAQ,EAAE,KADZ;AAEEC,IAAAA,QAAQ,EAAE,MAFZ;AAGEC,IAAAA,MAAM,EAAE;AAHV,GAlBQ,EAuBR;AACEF,IAAAA,QAAQ,EAAE,MADZ;AAEEC,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,MAAM,EAAE;AAHV,GAvBQ,EA4BR;AACE;AACAF,IAAAA,QAAQ,EAAE,MAFZ;AAGEC,IAAAA,QAAQ,EAAE,KAHZ;AAIEC,IAAAA,MAAM,EAAE;AAJV,GA5BQ,CAAV,EAkCG,IAlCH,EAkCS,CAAC;AAAEF,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,GAAD,KAAoC;AAC3CC,IAAAA,MAAM,CAAC,yCAAwBH,QAAxB,EAAkCC,QAAlC,CAAD,CAAN,CAAoDG,OAApD,CAA4DF,MAA5D;AACD,GApCD;AAqCD,CAtCO,CAAR","sourcesContent":["import { cardNumberFormatter, expirationDateFormatter } from './formatters'\n\ndescribe('cardNumberFormatter', () => {\n  test.each([\n    {\n      // pasting the number\n      oldValue: '',\n      newValue: '5555555555554444',\n      output: '5555 5555 5555 4444',\n    },\n    {\n      // trims extra characters\n      oldValue: '',\n      newValue: '55555555555544443333',\n      output: '5555 5555 5555 4444',\n    },\n    {\n      oldValue: '',\n      newValue: '5555555555',\n      output: '5555 5555 55',\n    },\n    {\n      oldValue: '555',\n      newValue: '5555',\n      output: '5555 ',\n    },\n    {\n      // deleting a character\n      oldValue: '5555 5',\n      newValue: '5555 ',\n      output: '5555 ',\n    },\n    {\n      oldValue: '',\n      newValue: '5',\n      output: '5',\n    },\n  ])('%j', ({ oldValue, newValue, output }) => {\n    expect(cardNumberFormatter(oldValue, newValue)).toEqual(output)\n  })\n})\n\ndescribe('expirationDateFormatter', () => {\n  test.each([\n    {\n      // pasting 1121\n      oldValue: '',\n      newValue: '1121',\n      output: '11/21',\n    },\n    {\n      // pasting 11/21\n      oldValue: '',\n      newValue: '11/21',\n      output: '11/21',\n    },\n    {\n      oldValue: '1',\n      newValue: '12',\n      output: '12/',\n    },\n    {\n      oldValue: '12/',\n      newValue: '12/2',\n      output: '12/2',\n    },\n    {\n      oldValue: '12/2',\n      newValue: '12/22',\n      output: '12/22',\n    },\n    {\n      // deleting a character\n      oldValue: '12/2',\n      newValue: '12/',\n      output: '12/',\n    },\n  ])('%j', ({ oldValue, newValue, output }) => {\n    expect(expirationDateFormatter(oldValue, newValue)).toEqual(output)\n  })\n})\n"]}