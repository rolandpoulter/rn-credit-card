{"version":3,"sources":["CreditCardForm.test.tsx"],"names":["Wrapper","formMethods","mode","defaultValues","holderName","cardNumber","expiration","cvv","handleSubmit","onSubmit","model","get","jest","fn","it","queryByText","getByTestId","render","cardInput","fireEvent","changeText","expect","toBeNull","not","input","getByText","press","toHaveBeenLastCalledWith"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { fireEvent, render, waitFor } from '@testing-library/react-native'\nimport { def, get } from 'bdd-lazy-var/getter'\nimport CreditCardForm from './CreditCardForm'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport { Button } from 'react-native'\nimport { FormModel } from '../types'\n\nconst Wrapper = () => {\n  const formMethods = useForm({\n    mode: 'onBlur',\n    defaultValues: {\n      holderName: '',\n      cardNumber: '',\n      expiration: '',\n      cvv: '',\n    },\n  })\n  const { handleSubmit } = formMethods\n\n  const onSubmit = (model: FormModel) => {\n    get.onSubmit(model)\n  }\n\n  return (\n    <FormProvider {...formMethods}>\n      <CreditCardForm />\n      <Button onPress={handleSubmit(onSubmit)} title={'Submit'} />\n    </FormProvider>\n  )\n}\n\ndef('render', () => () => render(<Wrapper />))\ndef('onSubmit', () => jest.fn())\n\nit('validates credit card number', async () => {\n  const { queryByText, getByTestId } = get.render()\n\n  // does not display validation message until input is filled\n  const cardInput = getByTestId('TextField.cardNumber')\n  fireEvent.changeText(cardInput, '55555555')\n  await waitFor(() => {\n    expect(queryByText(/This card number looks invalid./)).toBeNull()\n  })\n\n  // invalid card\n  fireEvent.changeText(cardInput, '5555555555554440')\n  await waitFor(() => {\n    expect(queryByText(/This card number looks invalid./)).not.toBeNull()\n  })\n\n  // valid card\n  fireEvent.changeText(cardInput, '5555 5555 5555 4444')\n  await waitFor(() => {\n    expect(queryByText(/This card number looks invalid./)).toBeNull()\n  })\n})\n\nit('validates expiration date', async () => {\n  const { queryByText, getByTestId } = get.render()\n\n  const input = getByTestId('TextField.expiration')\n  // passed expiration date\n  fireEvent.changeText(input, '1018')\n  await waitFor(() =>\n    expect(queryByText(/This expiration date looks invalid./)).not.toBeNull(),\n  )\n\n  // valid date\n  fireEvent.changeText(input, '10/23')\n  await waitFor(() =>\n    expect(queryByText(/This expiration date looks invalid./)).toBeNull(),\n  )\n})\n\nit('validates cvv', async () => {\n  const { queryByText, getByTestId } = get.render()\n\n  const input = getByTestId('TextField.cvv')\n  // invalid input\n  fireEvent.changeText(input, '4444')\n  await waitFor(() =>\n    expect(queryByText('This security code looks invalid.')).not.toBeNull(),\n  )\n\n  // valid input\n  fireEvent.changeText(input, '333')\n  await waitFor(() =>\n    expect(queryByText('This security code looks invalid.')).toBeNull(),\n  )\n})\n\nit('submits the form', async () => {\n  const { getByText, getByTestId } = get.render()\n\n  fireEvent.changeText(getByTestId('TextField.holderName'), 'Halil Bilir')\n  fireEvent.changeText(getByTestId('TextField.cardNumber'), '5555555555554444')\n  fireEvent.changeText(getByTestId('TextField.expiration'), '0224')\n  fireEvent.changeText(getByTestId('TextField.cvv'), '333')\n\n  fireEvent.press(getByText('Submit'))\n\n  await waitFor(() =>\n    expect(get.onSubmit).toHaveBeenLastCalledWith({\n      holderName: 'Halil Bilir',\n      // cardNumber and expiration are now formatted\n      cardNumber: '5555 5555 5555 4444',\n      expiration: '02/24',\n      cvv: '333',\n    }),\n  )\n})\n"]}