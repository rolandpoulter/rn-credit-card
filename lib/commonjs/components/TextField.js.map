{"version":3,"sources":["TextField.tsx"],"names":["TextField","React","forwardRef","props","ref","label","errorText","value","endEnhancer","style","onBlur","onFocus","restOfProps","inputColors","fonts","overrides","LibraryContext","errored","errorColor","focused","focusedColor","regular","regularColor","isFocused","setIsFocused","focusAnim","Animated","Value","current","timing","toValue","duration","easing","Easing","bezier","useNativeDriver","start","color","styles","input","fontFamily","borderColor","event","focus","labelContainer","transform","scale","interpolate","inputRange","outputRange","translateY","translateX","inputLabel","enhancerContainer","error","StyleSheet","create","padding","borderWidth","borderRadius","fontSize","position","paddingHorizontal","backgroundColor","top","right","marginTop","marginLeft"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react'\nimport {\n  TextInput,\n  StyleSheet,\n  View,\n  Animated,\n  Easing,\n  TouchableWithoutFeedback,\n} from 'react-native'\nimport Text from './Text'\nimport LibraryContext from '../LibraryContext'\n\ntype Props = React.ComponentProps<typeof TextInput> & {\n  label: string\n  errorText?: string | null\n  endEnhancer?: React.ReactNode\n}\n\nconst TextField = React.forwardRef<TextInput, Props>((props, ref) => {\n  const {\n    label,\n    errorText,\n    value,\n    endEnhancer,\n    style,\n    onBlur,\n    onFocus,\n    ...restOfProps\n  } = props\n  const { inputColors = {}, fonts, overrides } = useContext(LibraryContext)\n  const {\n    errored: errorColor = '#B00020',\n    focused: focusedColor = '#080F9C',\n    regular: regularColor = '#B9C4CA',\n  } = inputColors\n\n  const [isFocused, setIsFocused] = useState(false)\n\n  const focusAnim = useRef(new Animated.Value(0)).current\n\n  useEffect(() => {\n    Animated.timing(focusAnim, {\n      toValue: isFocused || !!value ? 1 : 0,\n      duration: 150,\n      easing: Easing.bezier(0.4, 0, 0.2, 1),\n      useNativeDriver: true,\n    }).start()\n  }, [focusAnim, isFocused, value])\n\n  let color = isFocused ? focusedColor : regularColor\n  if (errorText) {\n    color = errorColor\n  }\n\n  return (\n    <View style={style}>\n      <TextInput\n        style={[\n          styles.input,\n          {\n            fontFamily: fonts.regular,\n          },\n          overrides.input,\n          {\n            borderColor: color,\n          },\n        ]}\n        ref={ref}\n        {...restOfProps}\n        value={value}\n        onBlur={(event) => {\n          setIsFocused(false)\n          onBlur?.(event)\n        }}\n        onFocus={(event) => {\n          setIsFocused(true)\n          onFocus?.(event)\n        }}\n      />\n      <TouchableWithoutFeedback\n        onPress={() => {\n          // @ts-ignore\n          ref?.current?.focus()\n        }}\n      >\n        <Animated.View\n          style={[\n            styles.labelContainer,\n            {\n              transform: [\n                {\n                  scale: focusAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [1, 0.75],\n                  }),\n                },\n                {\n                  translateY: focusAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [24, -12],\n                  }),\n                },\n                {\n                  translateX: focusAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [16, 0],\n                  }),\n                },\n              ],\n            },\n            overrides.labelContainer,\n          ]}\n        >\n          <Text\n            style={[\n              styles.label,\n              overrides.inputLabel,\n              {\n                color,\n              },\n            ]}\n            bold\n          >\n            {label}\n            {errorText ? '*' : ''}\n          </Text>\n        </Animated.View>\n      </TouchableWithoutFeedback>\n      {endEnhancer && (\n        <View style={styles.enhancerContainer}>{endEnhancer}</View>\n      )}\n      {!!errorText && (\n        <Text style={[styles.error, overrides.errorText]}>{errorText}</Text>\n      )}\n    </View>\n  )\n})\n\nconst styles = StyleSheet.create({\n  input: {\n    padding: 24,\n    borderWidth: 1,\n    borderRadius: 4,\n    fontSize: 16,\n  },\n  labelContainer: {\n    position: 'absolute',\n    paddingHorizontal: 8,\n    backgroundColor: 'white',\n  },\n  label: {\n    fontSize: 14,\n  },\n  enhancerContainer: {\n    position: 'absolute',\n    top: 12,\n    right: 16,\n  },\n  error: {\n    marginTop: 4,\n    marginLeft: 12,\n    fontSize: 12,\n    color: '#B00020',\n  },\n})\n\nexport default TextField\n"]}