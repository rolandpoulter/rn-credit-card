{"version":3,"sources":["CreditCardForm.tsx"],"names":["CreditCardForm","props","horizontalStart","translations","parentTranslations","overrides","trigger","watch","cardNumber","card","cardValidator","number","isAmex","type","cvvLength","isHorizontal","setIsHorizontal","Platform","OS","width","windowWidth","inputWidth","scrollRef","holderNameRef","cardNumberRef","expirationRef","cvvRef","focusedField","setFocusedField","current","focus","textFieldStyle","styles","textField","regularField","goNext","field","result","scrollTo","x","CardFields","CVV","Keyboard","dismiss","ref","fonts","regular","bold","container","formOnly","maxHeight","required","cardNumberRequired","validate","isValid","value","cardNumberInvalid","cardNumberFormatter","CardNumber","cardHolderName","cardHolderNameRequired","cardholderName","cardHolderNameInvalid","CardHolderName","row","marginRight","expiration","expirationRequired","expirationDate","expirationInvalid","expirationDateFormatter","Expiration","securityCode","securityCodeRequired","cvv","securityCodeInvalid","button","done","next","StyleSheet","create","flex","flexDirection","marginBottom","marginTop","height","alignSelf","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport {\n  Keyboard,\n  Platform,\n  ScrollView,\n  StyleSheet,\n  TextInput,\n  useWindowDimensions,\n  View,\n} from 'react-native'\nimport { useFormContext } from 'react-hook-form'\nimport cardValidator from 'card-validator'\nimport FormTextField from './FormTextField'\nimport {\n  cardNumberFormatter,\n  expirationDateFormatter,\n} from '../utils/formatters'\nimport LibraryContext from '../LibraryContext'\nimport Button from './Button'\nimport CardIcon from './CardIcon'\nimport Conditional from './Conditional'\nimport FormCard from './FormCard'\nimport { getTranslations } from '../utils/translations'\nimport { CardFields, LibraryProps } from '../types'\n\nconst CreditCardForm: React.FC<LibraryProps> = (props) => {\n  const {\n    horizontalStart = true,\n    translations: parentTranslations,\n    overrides,\n  } = props\n  const translations = getTranslations(parentTranslations)\n  const { trigger, watch } = useFormContext()\n  const cardNumber = watch('cardNumber')\n  const { card } = cardValidator.number(cardNumber)\n  const isAmex = card?.type === 'american-express'\n  const cvvLength = isAmex ? 4 : 3\n\n  const [isHorizontal, setIsHorizontal] = useState(\n    horizontalStart && Platform.OS === 'ios',\n  )\n\n  const { width: windowWidth } = useWindowDimensions()\n  // input has 36*2 padding\n  const inputWidth = windowWidth - 72\n\n  const scrollRef = useRef<ScrollView>(null)\n  const holderNameRef = useRef<TextInput>(null)\n  const cardNumberRef = useRef<TextInput>(null)\n  const expirationRef = useRef<TextInput>(null)\n  const cvvRef = useRef<TextInput>(null)\n\n  const [focusedField, setFocusedField] = useState<CardFields | null>(null)\n\n  useEffect(() => {\n    if (cardNumberRef?.current) {\n      cardNumberRef.current.focus()\n    }\n  }, [cardNumberRef])\n\n  const textFieldStyle = isHorizontal\n    ? [\n        styles.textField,\n        {\n          width: inputWidth,\n        },\n      ]\n    : styles.regularField\n\n  async function goNext() {\n    if (focusedField === null) return\n\n    const field = ['cardNumber', 'holderName', 'expiration', 'cvv'][\n      focusedField\n    ]\n\n    if (isHorizontal) {\n      const result = await trigger(field)\n      if (!result) return\n      scrollRef.current?.scrollTo({ x: (focusedField + 1) * inputWidth })\n    }\n\n    if (focusedField === CardFields.CVV) {\n      setFocusedField(null)\n      setIsHorizontal(false)\n      Keyboard.dismiss()\n      return\n    }\n\n    const ref = [cardNumberRef, holderNameRef, expirationRef, cvvRef][\n      focusedField + 1\n    ]\n    ref.current?.focus()\n  }\n\n  return (\n    <LibraryContext.Provider\n      value={{\n        ...props,\n        overrides: overrides || {},\n        fonts: {\n          regular: props.fonts?.regular || 'RobotoMono_400Regular',\n          bold: props.fonts?.bold || 'RobotoMono_700Bold',\n        },\n        translations,\n      }}\n    >\n      <View style={styles.container}>\n        <Conditional condition={!props.formOnly}>\n          <FormCard cardType={card?.type} focusedField={focusedField} />\n        </Conditional>\n        <ScrollView\n          ref={scrollRef}\n          style={isHorizontal && { maxHeight: 120 }}\n          pagingEnabled={isHorizontal}\n          horizontal={isHorizontal}\n          scrollEnabled={!isHorizontal}\n          keyboardShouldPersistTaps=\"handled\"\n        >\n          <FormTextField\n            style={textFieldStyle}\n            ref={cardNumberRef}\n            name=\"cardNumber\"\n            label={translations.cardNumber}\n            keyboardType=\"number-pad\"\n            autoCompleteType=\"cc-number\"\n            maxLength={19}\n            validationLength={isAmex ? 18 : 19}\n            rules={{\n              required: translations.cardNumberRequired,\n              validate: {\n                isValid: (value: string) => {\n                  return (\n                    cardValidator.number(value).isValid ||\n                    translations.cardNumberInvalid\n                  )\n                },\n              },\n            }}\n            formatter={cardNumberFormatter}\n            endEnhancer={<CardIcon cardNumber={cardNumber} />}\n            onFocus={() => setFocusedField(CardFields.CardNumber)}\n            onValid={goNext}\n          />\n          <FormTextField\n            style={textFieldStyle}\n            ref={holderNameRef}\n            name=\"holderName\"\n            autoCompleteType=\"name\"\n            label={translations.cardHolderName}\n            rules={{\n              required: translations.cardHolderNameRequired,\n              validate: {\n                isValid: (value: string) => {\n                  return (\n                    cardValidator.cardholderName(value).isValid ||\n                    translations.cardHolderNameInvalid\n                  )\n                },\n              },\n            }}\n            autoCorrect={false}\n            onSubmitEditing={goNext}\n            onFocus={() => setFocusedField(CardFields.CardHolderName)}\n          />\n          <View style={styles.row}>\n            <FormTextField\n              style={[\n                textFieldStyle,\n                {\n                  marginRight: isHorizontal ? 0 : 24,\n                },\n              ]}\n              ref={expirationRef}\n              name=\"expiration\"\n              label={translations.expiration}\n              keyboardType=\"number-pad\"\n              autoCompleteType=\"cc-exp\"\n              maxLength={5}\n              validationLength={5}\n              rules={{\n                required: translations.expirationRequired,\n                validate: {\n                  isValid: (value: string) => {\n                    return (\n                      cardValidator.expirationDate(value).isValid ||\n                      translations.expirationInvalid\n                    )\n                  },\n                },\n              }}\n              formatter={expirationDateFormatter}\n              onFocus={() => setFocusedField(CardFields.Expiration)}\n              onValid={goNext}\n            />\n            <FormTextField\n              style={textFieldStyle}\n              ref={cvvRef}\n              name=\"cvv\"\n              label={translations.securityCode}\n              keyboardType=\"number-pad\"\n              autoCompleteType=\"cc-csc\"\n              maxLength={cvvLength}\n              validationLength={cvvLength}\n              rules={{\n                required: translations.securityCodeRequired,\n                validate: {\n                  isValid: (value: string) => {\n                    return (\n                      cardValidator.cvv(value, cvvLength).isValid ||\n                      translations.securityCodeInvalid\n                    )\n                  },\n                },\n              }}\n              onFocus={() => setFocusedField(CardFields.CVV)}\n              onValid={goNext}\n            />\n          </View>\n        </ScrollView>\n        <Conditional condition={isHorizontal}>\n          <Button\n            style={[styles.button, overrides?.button]}\n            title={\n              focusedField === CardFields.CVV\n                ? translations.done\n                : translations.next\n            }\n            onPress={goNext}\n          />\n        </Conditional>\n      </View>\n    </LibraryContext.Provider>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  row: {\n    flex: 1,\n    flexDirection: 'row',\n    marginBottom: 36,\n  },\n  textField: {\n    marginTop: 24,\n    height: 100,\n  },\n  regularField: {\n    flex: 1,\n    marginTop: 24,\n  },\n  button: {\n    width: 100,\n    alignSelf: 'flex-end',\n    borderTopLeftRadius: 32,\n    borderBottomLeftRadius: 32,\n    borderTopRightRadius: 8,\n    borderBottomRightRadius: 24,\n    backgroundColor: '#0093E9',\n  },\n})\n\nexport default CreditCardForm\n"]}