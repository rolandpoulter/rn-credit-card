{"version":3,"sources":["FormTextField.tsx"],"names":["FormTextField","React","forwardRef","props","ref","name","rules","validationLength","formatter","onBlur","onValid","disabled","restOfProps","control","formState","trigger","watch","value","validate","isValid","length","display","field","errors","message","event","text","formatted","onChange"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;AAYA,MAAMA,aAAa,gBAAGC,eAAMC,UAAN,CAAmC,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACvE,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,gBAAgB,GAAG,CAHf;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,QAPI;AAQJ,OAAGC;AARC,MASFT,KATJ;AAUA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA;AAA/B,MAAyC,oCAA/C;AACA,QAAMC,KAAK,GAAGD,KAAK,CAACX,IAAD,CAAnB;AAEA,wBAAU,MAAM;AACd,mBAAea,QAAf,GAA0B;AACxB,YAAMC,OAAO,GAAG,MAAMJ,OAAO,CAACV,IAAD,CAA7B;AACA,UAAIc,OAAJ,EAAaT,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO;AACrB;;AAED,QAAIO,KAAK,CAACG,MAAN,IAAgBb,gBAApB,EAAsC;AACpCW,MAAAA,QAAQ;AACT;AACF,GATD,EASG,CAACD,KAAD,EAAQZ,IAAR,EAAcE,gBAAd,EAAgCQ,OAAhC,CATH,EAduE,CAuB1B;;AAG7C,sBACE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE;AACLM,MAAAA,OAAO,EAAEV,QAAQ,GAAG,MAAH,GAAY;AADxB;AADT,kBAKE,6BAAC,yBAAD;AACE,IAAA,OAAO,EAAEE,OADX;AAEE,IAAA,MAAM,EAAE,CAAC;AAAES,MAAAA;AAAF,KAAD;AAAA;;AAAA,0BACN,6BAAC,kBAAD,CACE;AACA;AAFF,qBAGMV,WAHN;AAIE,QAAA,QAAQ,EAAED,QAJZ;AAKE,QAAA,GAAG,EAAEP,GALP;AAME,QAAA,MAAM,EAAG,aAAYC,IAAK,EAN5B;AAOE,QAAA,SAAS,2BAAES,SAAS,CAACS,MAAV,CAAiBlB,IAAjB,CAAF,0DAAE,sBAAwBmB,OAPrC;AAQE,QAAA,MAAM,EAAGC,KAAD,IAAW;AACjB,cAAId,QAAJ,EAAc;AACZ;AACD;;AACDW,UAAAA,KAAK,CAACb,MAAN;AACAA,UAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAGgB,KAAH,CAAN;AACD,SAdH;AAeE,QAAA,YAAY,EAAGC,IAAD,IAAU;AACtB,cAAIf,QAAJ,EAAc;AACZ;AACD;;AACD,gBAAMgB,SAAS,GAAGnB,SAAS,GAAGA,SAAS,CAACc,KAAK,CAACL,KAAP,EAAcS,IAAd,CAAZ,GAAkCA,IAA7D;AACAJ,UAAAA,KAAK,CAACM,QAAN,CAAeD,SAAf;;AACA,cAAIxB,KAAK,CAACyB,QAAV,EAAoB;AAClBzB,YAAAA,KAAK,CAACyB,QAAN,CAAeD,SAAf,EAA0BD,IAA1B;AACD;AACF,SAxBH;AAyBE,QAAA,KAAK,EAAEJ,KAAK,CAACL;AAzBf,SADM;AAAA,KAFV;AA+BE,IAAA,IAAI,EAAEZ,IA/BR;AAgCE,IAAA,KAAK,EAAEC;AAhCT,IALF,CADF;AA0CD,CApEqB,CAAtB;;eAsEeN,a","sourcesContent":["import React, { useEffect } from 'react'\nimport { useFormContext, Controller, RegisterOptions } from 'react-hook-form'\nimport { View, TextInput } from 'react-native'\nimport TextField from './TextField'\n\ntype Props = React.ComponentProps<typeof TextField> & {\n  name: string\n  rules: RegisterOptions\n  validationLength?: number\n  formatter?: (oldValue: string, newValue: string) => string\n  onValid?: () => void\n  onChange?: (formatted: string, text: string) => void\n  disabled?: boolean | null\n}\n\nconst FormTextField = React.forwardRef<TextInput, Props>((props, ref) => {\n  const {\n    name,\n    rules,\n    validationLength = 1,\n    formatter,\n    onBlur,\n    onValid,\n    disabled,\n    ...restOfProps\n  } = props\n  const { control, formState, trigger, watch } = useFormContext()\n  const value = watch(name)\n\n  useEffect(() => {\n    async function validate() {\n      const isValid = await trigger(name)\n      if (isValid) onValid?.()\n    }\n\n    if (value.length >= validationLength) {\n      validate()\n    }\n  }, [value, name, validationLength, trigger]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\n  return (\n    <View\n      style={{\n        display: disabled ? 'none' : 'flex'\n      }}\n    >\n      <Controller\n        control={control}\n        render={({ field }) => (\n          <TextField\n            // passing everything down to TextField\n            // to be able to support all TextInput props\n            {...restOfProps}\n            disabled={disabled}\n            ref={ref}\n            testID={`TextField.${name}`}\n            errorText={formState.errors[name]?.message}\n            onBlur={(event) => {\n              if (disabled) {\n                return;\n              }\n              field.onBlur()\n              onBlur?.(event)\n            }}\n            onChangeText={(text) => {\n              if (disabled) {\n                return;\n              }\n              const formatted = formatter ? formatter(field.value, text) : text\n              field.onChange(formatted)\n              if (props.onChange) {\n                props.onChange(formatted, text)\n              }\n            }}\n            value={field.value}\n          />\n        )}\n        name={name}\n        rules={rules}\n      />\n    </View>\n  )\n})\n\nexport default FormTextField\n"]}