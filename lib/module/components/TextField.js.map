{"version":3,"sources":["TextField.tsx"],"names":["React","useContext","useEffect","useRef","useState","TextInput","StyleSheet","View","Animated","Easing","TouchableWithoutFeedback","Text","LibraryContext","TextField","forwardRef","props","ref","label","errorText","value","endEnhancer","style","onBlur","onFocus","restOfProps","disabled","inputColors","fonts","overrides","errored","errorColor","focused","focusedColor","regular","regularColor","isFocused","setIsFocused","focusAnim","Value","current","timing","toValue","duration","easing","bezier","useNativeDriver","start","color","styles","input","fontFamily","opacity","borderColor","event","focus","labelContainer","transform","scale","interpolate","inputRange","outputRange","translateY","translateX","inputLabel","enhancerContainer","error","create","padding","borderWidth","borderRadius","fontSize","position","paddingHorizontal","backgroundColor","top","right","marginTop","marginLeft"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SACEC,SADF,EAEEC,UAFF,EAGEC,IAHF,EAIEC,QAJF,EAKEC,MALF,EAMEC,wBANF,QAOO,cAPP;AAQA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AASA,MAAMC,SAAS,gBAAGb,KAAK,CAACc,UAAN,CAAmC,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACnE,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,OAPI;AAQJ;AACA,OAAGC;AATC,MAUFT,KAVJ;AAYA,QAAM;AACJU,IAAAA;AADI,MAEFD,WAFJ;AAIA,QAAM;AAAEE,IAAAA,WAAW,GAAG,EAAhB;AAAoBC,IAAAA,KAApB;AAA2BC,IAAAA;AAA3B,MAAyC3B,UAAU,CAACW,cAAD,CAAzD;AACA,QAAM;AACJiB,IAAAA,OAAO,EAAEC,UAAU,GAAG,SADlB;AAEJC,IAAAA,OAAO,EAAEC,YAAY,GAAG,SAFpB;AAGJC,IAAAA,OAAO,EAAEC,YAAY,GAAG;AAHpB,MAIFR,WAJJ;AAMA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BhC,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMiC,SAAS,GAAGlC,MAAM,CAAC,IAAIK,QAAQ,CAAC8B,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAAhD;AAEArC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,QAAQ,CAACgC,MAAT,CAAgBH,SAAhB,EAA2B;AACzBI,MAAAA,OAAO,EAAEN,SAAS,IAAI,CAAC,CAAChB,KAAf,GAAuB,CAAvB,GAA2B,CADX;AAEzBuB,MAAAA,QAAQ,EAAE,GAFe;AAGzBC,MAAAA,MAAM,EAAElC,MAAM,CAACmC,MAAP,CAAc,GAAd,EAAmB,CAAnB,EAAsB,GAAtB,EAA2B,CAA3B,CAHiB;AAIzBC,MAAAA,eAAe,EAAE;AAJQ,KAA3B,EAKGC,KALH;AAMD,GAPQ,EAON,CAACT,SAAD,EAAYF,SAAZ,EAAuBhB,KAAvB,CAPM,CAAT;AASA,MAAI4B,KAAK,GAAGZ,SAAS,GAAGH,YAAH,GAAkBE,YAAvC;;AACA,MAAIhB,SAAJ,EAAe;AACb6B,IAAAA,KAAK,GAAGjB,UAAR;AACD;;AAED,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAET;AAAb,kBACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE,CACL2B,MAAM,CAACC,KADF,EAEL;AACEC,MAAAA,UAAU,EAAEvB,KAAK,CAACM,OADpB;AAEEkB,MAAAA,OAAO,EAAE1B,QAAQ,GAAG,GAAH,GAAS;AAF5B,KAFK,EAMLG,SAAS,CAACqB,KANL,EAOL;AACEG,MAAAA,WAAW,EAAEL;AADf,KAPK,CADT,CAYE;AAZF;AAaE,IAAA,GAAG,EAAE/B;AAbP,KAcMQ,WAdN;AAeE,IAAA,KAAK,EAAEL,KAfT;AAgBE,IAAA,MAAM,EAAGkC,KAAD,IAAW;AACjB,UAAI5B,QAAJ,EAAc;AACZ;AACD;;AACDW,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAd,MAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAG+B,KAAH,CAAN;AACD,KAtBH;AAuBE,IAAA,OAAO,EAAGA,KAAD,IAAW;AAClB,UAAI5B,QAAJ,EAAc;AACZ;AACD;;AACDW,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAb,MAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAG8B,KAAH,CAAP;AACD;AA7BH,KADF,eAgCE,oBAAC,wBAAD;AACE,IAAA,OAAO,EAAE,MAAM;AAAA;;AACb,UAAI5B,QAAJ,EAAc;AACZ;AACD,OAHY,CAIb;;;AACAT,MAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,4BAAAA,GAAG,CAAEuB,OAAL,8DAAce,KAAd;AACD;AAPH,kBASE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACLN,MAAM,CAACO,cADF,EAEL;AACEC,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,KAAK,EAAEpB,SAAS,CAACqB,WAAV,CAAsB;AAC3BC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADe;AAE3BC,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,IAAJ;AAFc,SAAtB;AADT,OADS,EAOT;AACEC,QAAAA,UAAU,EAAExB,SAAS,CAACqB,WAAV,CAAsB;AAChCC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoB;AAEhCC,UAAAA,WAAW,EAAE,CAAC,EAAD,EAAK,CAAC,EAAN;AAFmB,SAAtB;AADd,OAPS,EAaT;AACEE,QAAAA,UAAU,EAAEzB,SAAS,CAACqB,WAAV,CAAsB;AAChCC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoB;AAEhCC,UAAAA,WAAW,EAAE,CAAC,EAAD,EAAK,CAAL;AAFmB,SAAtB;AADd,OAbS;AADb,KAFK,EAwBLhC,SAAS,CAAC2B,cAxBL;AADT,kBA4BE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACLP,MAAM,CAAC/B,KADF,EAELW,SAAS,CAACmC,UAFL,EAGL;AACEhB,MAAAA;AADF,KAHK,CADT;AAQE,IAAA,IAAI;AARN,KAUG9B,KAVH,EAWGC,SAAS,GAAG,GAAH,GAAS,EAXrB,CA5BF,CATF,CAhCF,EAoFGE,WAAW,iBACV,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE4B,MAAM,CAACgB;AAApB,KAAwC5C,WAAxC,CArFJ,EAuFG,CAAC,CAACF,SAAF,iBACC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAC8B,MAAM,CAACiB,KAAR,EAAerC,SAAS,CAACV,SAAzB;AAAb,KAAmDA,SAAnD,CAxFJ,CADF;AA6FD,CAvIiB,CAAlB;AAyIA,MAAM8B,MAAM,GAAG1C,UAAU,CAAC4D,MAAX,CAAkB;AAC/BjB,EAAAA,KAAK,EAAE;AACLkB,IAAAA,OAAO,EAAE,EADJ;AAELC,IAAAA,WAAW,EAAE,CAFR;AAGLC,IAAAA,YAAY,EAAE,CAHT;AAILC,IAAAA,QAAQ,EAAE;AAJL,GADwB;AAO/Bf,EAAAA,cAAc,EAAE;AACdgB,IAAAA,QAAQ,EAAE,UADI;AAEdC,IAAAA,iBAAiB,EAAE,CAFL;AAGdC,IAAAA,eAAe,EAAE;AAHH,GAPe;AAY/BxD,EAAAA,KAAK,EAAE;AACLqD,IAAAA,QAAQ,EAAE;AADL,GAZwB;AAe/BN,EAAAA,iBAAiB,EAAE;AACjBO,IAAAA,QAAQ,EAAE,UADO;AAEjBG,IAAAA,GAAG,EAAE,EAFY;AAGjBC,IAAAA,KAAK,EAAE;AAHU,GAfY;AAoB/BV,EAAAA,KAAK,EAAE;AACLW,IAAAA,SAAS,EAAE,CADN;AAELC,IAAAA,UAAU,EAAE,EAFP;AAGLP,IAAAA,QAAQ,EAAE,EAHL;AAILvB,IAAAA,KAAK,EAAE;AAJF;AApBwB,CAAlB,CAAf;AA4BA,eAAelC,SAAf","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react'\nimport {\n  TextInput,\n  StyleSheet,\n  View,\n  Animated,\n  Easing,\n  TouchableWithoutFeedback,\n} from 'react-native'\nimport Text from './Text'\nimport LibraryContext from '../LibraryContext'\n\ntype Props = React.ComponentProps<typeof TextInput> & {\n  label: string\n  errorText?: string | null\n  endEnhancer?: React.ReactNode\n  disabled?: boolean | null\n}\n\nconst TextField = React.forwardRef<TextInput, Props>((props, ref) => {\n  const {\n    label,\n    errorText,\n    value,\n    endEnhancer,\n    style,\n    onBlur,\n    onFocus,\n    // disabled,\n    ...restOfProps\n  } = props\n\n  const {\n    disabled\n  } = restOfProps;\n\n  const { inputColors = {}, fonts, overrides } = useContext(LibraryContext)\n  const {\n    errored: errorColor = '#B00020',\n    focused: focusedColor = '#080F9C',\n    regular: regularColor = '#B9C4CA',\n  } = inputColors\n\n  const [isFocused, setIsFocused] = useState(false)\n\n  const focusAnim = useRef(new Animated.Value(0)).current\n\n  useEffect(() => {\n    Animated.timing(focusAnim, {\n      toValue: isFocused || !!value ? 1 : 0,\n      duration: 150,\n      easing: Easing.bezier(0.4, 0, 0.2, 1),\n      useNativeDriver: true,\n    }).start()\n  }, [focusAnim, isFocused, value])\n\n  let color = isFocused ? focusedColor : regularColor\n  if (errorText) {\n    color = errorColor\n  }\n\n  return (\n    <View style={style}>\n      <TextInput\n        style={[\n          styles.input,\n          {\n            fontFamily: fonts.regular,\n            opacity: disabled ? 0.1 : 1,\n          },\n          overrides.input,\n          {\n            borderColor: color,\n          },\n        ]}\n        // disabled={disabled}\n        ref={ref}\n        {...restOfProps}\n        value={value}\n        onBlur={(event) => {\n          if (disabled) {\n            return;\n          }\n          setIsFocused(false)\n          onBlur?.(event)\n        }}\n        onFocus={(event) => {\n          if (disabled) {\n            return;\n          }\n          setIsFocused(true)\n          onFocus?.(event)\n        }}\n      />\n      <TouchableWithoutFeedback\n        onPress={() => {\n          if (disabled) {\n            return;\n          }\n          // @ts-ignore\n          ref?.current?.focus()\n        }}\n      >\n        <Animated.View\n          style={[\n            styles.labelContainer,\n            {\n              transform: [\n                {\n                  scale: focusAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [1, 0.75],\n                  }),\n                },\n                {\n                  translateY: focusAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [24, -12],\n                  }),\n                },\n                {\n                  translateX: focusAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [16, 0],\n                  }),\n                },\n              ],\n            },\n            overrides.labelContainer,\n          ]}\n        >\n          <Text\n            style={[\n              styles.label,\n              overrides.inputLabel,\n              {\n                color,\n              },\n            ]}\n            bold\n          >\n            {label}\n            {errorText ? '*' : ''}\n          </Text>\n        </Animated.View>\n      </TouchableWithoutFeedback>\n      {endEnhancer && (\n        <View style={styles.enhancerContainer}>{endEnhancer}</View>\n      )}\n      {!!errorText && (\n        <Text style={[styles.error, overrides.errorText]}>{errorText}</Text>\n      )}\n    </View>\n  )\n})\n\nconst styles = StyleSheet.create({\n  input: {\n    padding: 24,\n    borderWidth: 1,\n    borderRadius: 4,\n    fontSize: 16,\n  },\n  labelContainer: {\n    position: 'absolute',\n    paddingHorizontal: 8,\n    backgroundColor: 'white',\n  },\n  label: {\n    fontSize: 14,\n  },\n  enhancerContainer: {\n    position: 'absolute',\n    top: 12,\n    right: 16,\n  },\n  error: {\n    marginTop: 4,\n    marginLeft: 12,\n    fontSize: 12,\n    color: '#B00020',\n  },\n})\n\nexport default TextField\n"]}