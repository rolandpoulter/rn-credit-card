{"version":3,"sources":["FormTextField.tsx"],"names":["React","useEffect","useFormContext","Controller","TextField","FormTextField","forwardRef","props","ref","name","rules","validationLength","formatter","onBlur","onValid","restOfProps","control","formState","trigger","watch","value","validate","isValid","length","field","errors","message","event","text","formatted","onChange"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA4D,iBAA5D;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAWA,MAAMC,aAAa,gBAAGL,KAAK,CAACM,UAAN,CAAmC,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACvE,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,gBAAgB,GAAG,CAHf;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA,OANI;AAOJ,OAAGC;AAPC,MAQFR,KARJ;AASA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA;AAA/B,MAAyCjB,cAAc,EAA7D;AACA,QAAMkB,KAAK,GAAGD,KAAK,CAACV,IAAD,CAAnB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeoB,QAAf,GAA0B;AACxB,YAAMC,OAAO,GAAG,MAAMJ,OAAO,CAACT,IAAD,CAA7B;AACA,UAAIa,OAAJ,EAAaR,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO;AACrB;;AAED,QAAIM,KAAK,CAACG,MAAN,IAAgBZ,gBAApB,EAAsC;AACpCU,MAAAA,QAAQ;AACT;AACF,GATQ,EASN,CAACD,KAAD,EAAQX,IAAR,EAAcE,gBAAd,EAAgCO,OAAhC,CATM,CAAT,CAbuE,CAsB1B;;AAE7C,sBACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEF,OADX;AAEE,IAAA,MAAM,EAAE,CAAC;AAAEQ,MAAAA;AAAF,KAAD;AAAA;;AAAA,0BACN,oBAAC,SAAD,CACE;AACA;AAFF,qBAGMT,WAHN;AAIE,QAAA,GAAG,EAAEP,GAJP;AAKE,QAAA,MAAM,EAAG,aAAYC,IAAK,EAL5B;AAME,QAAA,SAAS,2BAAEQ,SAAS,CAACQ,MAAV,CAAiBhB,IAAjB,CAAF,0DAAE,sBAAwBiB,OANrC;AAOE,QAAA,MAAM,EAAGC,KAAD,IAAW;AACjBH,UAAAA,KAAK,CAACX,MAAN;AACAA,UAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAGc,KAAH,CAAN;AACD,SAVH;AAWE,QAAA,YAAY,EAAGC,IAAD,IAAU;AACtB,gBAAMC,SAAS,GAAGjB,SAAS,GAAGA,SAAS,CAACY,KAAK,CAACJ,KAAP,EAAcQ,IAAd,CAAZ,GAAkCA,IAA7D;AACAJ,UAAAA,KAAK,CAACM,QAAN,CAAeD,SAAf;;AACA,cAAItB,KAAK,CAACuB,QAAV,EAAoB;AAClBvB,YAAAA,KAAK,CAACuB,QAAN,CAAeD,SAAf,EAA0BD,IAA1B;AACD;AACF,SAjBH;AAkBE,QAAA,KAAK,EAAEJ,KAAK,CAACJ;AAlBf,SADM;AAAA,KAFV;AAwBE,IAAA,IAAI,EAAEX,IAxBR;AAyBE,IAAA,KAAK,EAAEC;AAzBT,IADF;AA6BD,CArDqB,CAAtB;AAuDA,eAAeL,aAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useFormContext, Controller, RegisterOptions } from 'react-hook-form'\nimport { TextInput } from 'react-native'\nimport TextField from './TextField'\n\ntype Props = React.ComponentProps<typeof TextField> & {\n  name: string\n  rules: RegisterOptions\n  validationLength?: number\n  formatter?: (oldValue: string, newValue: string) => string\n  onValid?: () => void\n  onChange?: (formatted: string, text: string) => void\n}\n\nconst FormTextField = React.forwardRef<TextInput, Props>((props, ref) => {\n  const {\n    name,\n    rules,\n    validationLength = 1,\n    formatter,\n    onBlur,\n    onValid,\n    ...restOfProps\n  } = props\n  const { control, formState, trigger, watch } = useFormContext()\n  const value = watch(name)\n\n  useEffect(() => {\n    async function validate() {\n      const isValid = await trigger(name)\n      if (isValid) onValid?.()\n    }\n\n    if (value.length >= validationLength) {\n      validate()\n    }\n  }, [value, name, validationLength, trigger]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <Controller\n      control={control}\n      render={({ field }) => (\n        <TextField\n          // passing everything down to TextField\n          // to be able to support all TextInput props\n          {...restOfProps}\n          ref={ref}\n          testID={`TextField.${name}`}\n          errorText={formState.errors[name]?.message}\n          onBlur={(event) => {\n            field.onBlur()\n            onBlur?.(event)\n          }}\n          onChangeText={(text) => {\n            const formatted = formatter ? formatter(field.value, text) : text\n            field.onChange(formatted)\n            if (props.onChange) {\n              props.onChange(formatted, text)\n            }\n          }}\n          value={field.value}\n        />\n      )}\n      name={name}\n      rules={rules}\n    />\n  )\n})\n\nexport default FormTextField\n"]}